% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/backtest_strategy.R
\name{backtest_universal_portfolio}
\alias{backtest_universal_portfolio}
\title{Backtests the universal portfolio algorithm}
\usage{
backtest_universal_portfolio(
  price_relatives,
  transaction_rate,
  nsamples,
  consider_transaction_rate = TRUE
)
}
\arguments{
\item{price_relatives}{a matrix of price relatives, each row
representing a trading period and each column an asset.
A price relative is \eqn{\frac{p_t}{p_{t-1}}}, i.e.
the ratio of previous price to new price. Prices change
according to the price relatives after the trade,
i.e. the price relatives for the trading period are not known
at trading time}

\item{transaction_rate}{The percentage of each transaction (buy and sell)
spent on broker fees}

\item{nsamples}{The number of portfolios to sample when estimating
the universal portfolio}

\item{consider_transaction_rate}{If \code{FALSE}, uses the original
1991 algorithm proposed by Cover, where the cumulative wealth
produced by a constantly rebalanced portfolio (CRP) is
computed without consider transaction costs. If \code{TRUE},
follows Blum & Kalai's 1991 paper and considers the transaction
costs.}
}
\description{
Backtests using Cover's 1991 universal portfolio algorithm,
estimated with samples of portfolios.
}
\details{
See Cover's paper "Universal Portfolios" (1991,
\url{https://onlinelibrary.wiley.com/doi/epdf/10.1111/j.1467-9965.1991.tb00002.x}
) for a description.
We estimate the universal portfolio using
a sampling estimation method mentioned in Blum & Kalai's
1999 paper "Universal Portfolios With and Without Transaction Costs"
(\url{https://link.springer.com/article/10.1023/A:1007530728748}),
but is basically just random sampling of portfolios, then the
average weighted by the produced cumulative wealth up to this point.
However, we use Dirichlet(1/2,1/2,...,1/2) priors for the portfolios
because they may have better performance according to
Cover & Ordentlich (1996)

initializes to uniform portfolio
}
